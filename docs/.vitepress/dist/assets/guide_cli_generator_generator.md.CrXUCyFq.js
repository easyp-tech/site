import{_ as e,c as a,a2 as s,o as n}from"./chunks/framework.CRQqvidf.js";const u=JSON.parse('{"title":"Generator","description":"","frontmatter":{},"headers":[],"relativePath":"guide/cli/generator/generator.md","filePath":"guide/cli/generator/generator.md","lastUpdated":1728160091000}'),t={name:"guide/cli/generator/generator.md"};function l(r,i,o,p,h,d){return n(),a("div",null,i[0]||(i[0]=[s(`<h1 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;Generator&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#key-features-of-the-generator">Key Features of the Generator</a></li><li><a href="#example-configuration-file">Example Configuration File</a><ul><li><a href="#explanation-of-parameters">Explanation of Parameters:</a></li><li><a href="#command-for-running-the-generator">Command for Running the Generator</a></li><li><a href="#without-specifying-a-configuration-file">Without Specifying a Configuration File</a></li></ul></li><li><a href="#additional-capabilities">Additional Capabilities</a></li><li><a href="#conclusion">Conclusion</a></li></ul></nav><p>EasyP includes a powerful generator that simplifies the process of generating code from proto files. By using YAML configurations, EasyP makes this process more user-friendly and intuitive compared to using the protoc command directly.</p><h2 id="key-features-of-the-generator" tabindex="-1">Key Features of the Generator <a class="header-anchor" href="#key-features-of-the-generator" aria-label="Permalink to &quot;Key Features of the Generator&quot;">​</a></h2><ol><li><p>Simplified Code Generation:</p><ul><li>Generate code from proto files using a <code>YAML</code> configuration.</li><li>Avoid the need to write long and complex protoc commands.</li></ul></li><li><p>Wrapper around protoc:</p><ul><li>EasyP functions as a wrapper around protoc, providing a more convenient API through configuration files.</li><li>Supports all options and plugins available in protoc.</li></ul></li><li><p>Flexibility and Customization:</p><ul><li>Use the same parameters as protoc plugins, directly in the configuration file.</li><li>Support for multiple plugins and their parameters in a single configuration.</li></ul></li></ol><h2 id="example-configuration-file" tabindex="-1">Example Configuration File <a class="header-anchor" href="#example-configuration-file" aria-label="Permalink to &quot;Example Configuration File&quot;">​</a></h2><p>The <code>YAML</code> configuration file allows you to specify all parameters for code generation, including the use of various plugins and their options:</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">go</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">source_relative</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">go-grpc</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      opts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">source_relative</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        require_unimplemented_servers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="explanation-of-parameters" tabindex="-1">Explanation of Parameters: <a class="header-anchor" href="#explanation-of-parameters" aria-label="Permalink to &quot;Explanation of Parameters:&quot;">​</a></h3><ul><li><code>name</code>: The name of the plugin to be used for code generation (e.g., go or go-grpc).</li><li><code>out</code>: The directory where the generated files will be output.</li><li><code>opts</code>: Options to be passed to the plugin. These options correspond to the parameters used in the protoc command.</li></ul><h3 id="command-for-running-the-generator" tabindex="-1">Command for Running the Generator <a class="header-anchor" href="#command-for-running-the-generator" aria-label="Permalink to &quot;Command for Running the Generator&quot;">​</a></h3><p>To use the EasyP generator, ensure you have configured your <code>YAML</code> configuration file. Then, simply run the command:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easyp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cfg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-config-file.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Where <code>your-config-file.yaml</code> is the path to your YAML configuration file.</p><h3 id="without-specifying-a-configuration-file" tabindex="-1">Without Specifying a Configuration File <a class="header-anchor" href="#without-specifying-a-configuration-file" aria-label="Permalink to &quot;Without Specifying a Configuration File&quot;">​</a></h3><p>If the -cfg flag is not specified, the default configuration file <code>easyp.yaml</code> in the current directory will be used:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easyp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="additional-capabilities" tabindex="-1">Additional Capabilities <a class="header-anchor" href="#additional-capabilities" aria-label="Permalink to &quot;Additional Capabilities&quot;">​</a></h2><ul><li>Support for Various Output Formats: Ability to specify different directories for generated files when using multiple plugins.</li><li>Integration with Build Systems: Easy integration into <code>CI/CD</code> systems to automate code generation.</li><li>Flexibility in Configuration: Add and modify plugins and their parameters in the configuration file without the need to change commands in scripts.</li></ul><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>The EasyP generator provides a flexible and convenient alternative to directly using <code>protoc</code>, offering powerful configuration capabilities through <code>YAML</code> files. This simplifies the integration and automation of code generation in your projects.</p>`,21)]))}const g=e(t,[["render",l]]);export{u as __pageData,g as default};
